{
	"id": "ab0dd5d7-d1fa-d771-ca8c-b0813a9b6954",
	"name": "Webquiz",
	"allTests": [],
	"timestamp": 1478628804295,
	"collection_id": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
	"folder_id": 0,
	"target_type": "collection",
	"environment_id": "0",
	"data": [],
	"delay": 0,
	"count": 1,
	"collection": {
		"id": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
		"name": "Webquiz",
		"description": "",
		"order": [],
		"folders": [
			{
				"id": "7a989fb5-2ddf-46bb-546b-1c01a48d0d40",
				"name": "API",
				"description": "",
				"write": true,
				"order": [
					"0c9bbae9-6b77-b1c3-4e32-c1b789a9e9d1",
					"9a772097-ebba-916a-2b2e-0cdb8c5a40fc",
					"0ba195f5-9efb-11ee-572c-d7435f4dc691",
					"8f2d9b89-5324-f3ff-c2c8-e175ed170f34",
					"d70ccbf2-e9af-7084-ad5e-3437f0b45537",
					"d25f9f02-2a31-9832-3be9-d7f5bca5ffe1",
					"16033ef3-faee-bd44-fbfb-54b11d78a194",
					"1bdb438a-6a54-924f-db8d-822b03236d27"
				],
				"collection": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
				"owner": "877335",
				"collection_id": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324"
			},
			{
				"id": "1b15345e-8ab8-d92b-0bd6-11ad616c7ae7",
				"name": "question",
				"description": "tests to save a question",
				"write": true,
				"order": [
					"169ce8ba-057b-2ab1-a1bc-426cdef3c632",
					"163e9842-3854-58fd-407f-ff343a5555a7",
					"7a5a2e8a-4a9e-3bb7-3aab-4cb0f0cbf51f",
					"5b0785af-37c2-ce9d-97cf-82feb29e6899",
					"44a6ffd2-191d-007e-76d0-e00ba386c6e1",
					"1d74f4f0-1b93-ca18-e3e9-b377841ed352"
				],
				"collection": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
				"owner": "877335",
				"collection_id": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324"
			},
			{
				"id": "109ad8db-b476-16a9-1a3d-477e6aa70a21",
				"name": "results",
				"description": "",
				"write": true,
				"order": [
					"86938958-53b1-947f-f643-1a5f9a665ab3",
					"d9cf1fa7-b27c-1d52-fb47-55a41b3e2c8c",
					"8a772ee2-3a1e-3174-fe1c-104158dd207d",
					"ea9d9fb2-c9ff-5ae3-5b07-d1b0775aed32",
					"80230551-19b3-8714-0512-e3dac54f35cf",
					"4836112b-2179-9989-ffa7-5c15ea9e2414",
					"60c9cbc7-d535-3f89-89ed-890b4a18fbc9",
					"dedfe489-606d-90c7-fc55-59b5bb3a66bc",
					"3d9f0ea3-c333-84e3-cb81-e37dc8267ed7"
				],
				"collection": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
				"owner": "877335",
				"collection_id": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324"
			},
			{
				"id": "2be146ae-4fa3-3ba4-e967-fbb06353a47c",
				"name": "user",
				"description": "",
				"write": true,
				"order": [
					"46aaf5fd-576e-2b5b-a9ee-38313f2b836e",
					"e5052664-fe49-ad05-9d86-2dd2a0e99ba8",
					"b957c937-da05-69b2-a343-559845e38bf6"
				],
				"collection": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
				"owner": "877335",
				"collection_id": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324"
			}
		],
		"requests": [
			{
				"id": "0ba195f5-9efb-11ee-572c-d7435f4dc691",
				"headers": "Content-Type: application/json\nAccept: image/jpeg\n",
				"url": "localhost:3000/api/question/short/domains/10000000000",
				"preRequestScript": null,
				"pathVariables": {},
				"method": "GET",
				"data": "",
				"dataMode": "params",
				"version": 2,
				"tests": "var jsonData = JSON.parse(responseBody);\ntests[\"data has an error text, 'No question in these domains.'\"] = jsonData.error === \"No question in these domains.\";\ntests[\"data has parameters\"] = typeof jsonData.params === \"object\";\n\ntests[\"Status code is 404\"] = responseCode.code === 404;",
				"currentHelper": "normal",
				"helperAttributes": {},
				"time": 1478560682344,
				"name": "localhost:3000/api/question/short/domains/10000000000",
				"description": "Ask for a non existant question",
				"collectionId": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
				"responses": []
			},
			{
				"id": "0c9bbae9-6b77-b1c3-4e32-c1b789a9e9d1",
				"headers": "Content-Type: application/json\nAccept: image/jpeg\n",
				"url": "localhost:3000/api/question/short/domains/",
				"preRequestScript": null,
				"pathVariables": {},
				"method": "GET",
				"data": "{\n\t\"posted\": \"post\"\n}",
				"dataMode": "raw",
				"version": 2,
				"tests": "var jsonData = JSON.parse(responseBody);\ntests[\"data has an id\"] = typeof jsonData._id === \"string\";\ntests[\"data has a domain\"] = typeof jsonData.domain === \"string\";\ntests[\"data has a question\"] = typeof jsonData.question === \"string\";\ntests[\"data has answers\"] = typeof jsonData.answers === \"object\";\ntests[\"minimum two answers\"] = jsonData.answers.length > 1;\n",
				"currentHelper": "normal",
				"helperAttributes": {},
				"time": 1478560826255,
				"name": "localhost:3000/api/question/short/domains/",
				"description": "Get a random question",
				"collectionId": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
				"responses": []
			},
			{
				"id": "16033ef3-faee-bd44-fbfb-54b11d78a194",
				"headers": "",
				"url": "localhost:3000/api/statistics",
				"preRequestScript": null,
				"pathVariables": {},
				"method": "DELETE",
				"data": null,
				"dataMode": "params",
				"version": 2,
				"tests": "tests[\"Status code is 204\"] = responseCode.code === 204;",
				"currentHelper": "normal",
				"helperAttributes": {},
				"time": 1478628739641,
				"name": "/api/statistics",
				"description": "",
				"collectionId": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
				"responses": []
			},
			{
				"id": "163e9842-3854-58fd-407f-ff343a5555a7",
				"headers": "Content-Type: application/json\nAccept: image/jpeg\n",
				"url": "localhost:3000/api/question",
				"preRequestScript": null,
				"pathVariables": {},
				"method": "POST",
				"data": "{\n\t\"question\": \"est-ce que ça va ?\",\n\t\"domain\" : \"CSS2345\",\n\t\"answers\": [ \"oui\"],\n\t\"goodAnswer\": \"so\"\n}",
				"dataMode": "raw",
				"version": 2,
				"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;",
				"currentHelper": "normal",
				"helperAttributes": {},
				"time": 1478470112485,
				"name": "localhost:3000/api/question",
				"description": "Question request with a bad type for good answer",
				"collectionId": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
				"responses": []
			},
			{
				"id": "169ce8ba-057b-2ab1-a1bc-426cdef3c632",
				"headers": "Content-Type: application/json\nAccept: image/jpeg\n",
				"url": "localhost:3000/api/question",
				"preRequestScript": null,
				"pathVariables": {},
				"method": "POST",
				"data": "{\n\t\"question\": \"\",\n\t\"domain\" : \"CSS2345\",\n\t\"answers\": [ \"oui\", \"non\", \"tais toi hostie\"],\n\t\"goodAnswer\": 2\n}",
				"dataMode": "raw",
				"version": 2,
				"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;",
				"currentHelper": "normal",
				"helperAttributes": {},
				"time": 1478470107111,
				"name": "localhost:3000/api/question",
				"description": "Question request with an empty field",
				"collectionId": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
				"responses": []
			},
			{
				"id": "1bdb438a-6a54-924f-db8d-822b03236d27",
				"headers": "",
				"url": "localhost:3000/api/statistics",
				"preRequestScript": "postman.clearGlobalVariable(\"test_answers\");\npostman.clearGlobalVariable(\"test_goodAnswers\");",
				"pathVariables": {},
				"method": "GET",
				"data": null,
				"dataMode": "params",
				"version": 2,
				"tests": "var json = JSON.parse(responseBody);\n\n\ntests[\"json values are incremented\"] = 0 === json.answers &&\n0 === json.goodAnswers;",
				"currentHelper": "normal",
				"helperAttributes": {},
				"time": 1478628778939,
				"name": "/api/statistics - test deletion",
				"description": "",
				"collectionId": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
				"responses": []
			},
			{
				"id": "1d74f4f0-1b93-ca18-e3e9-b377841ed352",
				"headers": "Content-Type: application/json\nAccept: image/jpeg\n",
				"url": "localhost:3000/api/question",
				"preRequestScript": null,
				"pathVariables": {},
				"method": "POST",
				"data": "{\n\t\"question\": \"est-ce que ça va ?\",\n\t\"domain\" : \"CSS2345\",\n\t\"answers\": [ \"oui\", \"non\", \"tais toi hostie\"],\n\t\"goodAnswer\": 2\n}",
				"dataMode": "raw",
				"version": 2,
				"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;",
				"currentHelper": "normal",
				"helperAttributes": {},
				"time": 1478470143264,
				"name": "localhost:3000/api/question",
				"description": "Question request, simple send",
				"collectionId": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
				"responses": []
			},
			{
				"id": "3d9f0ea3-c333-84e3-cb81-e37dc8267ed7",
				"headers": "Content-Type: application/json\nAccept: image/jpeg\n",
				"url": "localhost:3000/api/result/last",
				"preRequestScript": "",
				"pathVariables": {},
				"method": "GET",
				"data": "{\n  \"domains\": [\"CSS3\",\"HTML5\"],\n  \"timestamp\": 1478580308514,\n  \"goodAnswers\": 5,\n  \"totalAnswers\": 10,\n  \"surrender\": false\n}",
				"dataMode": "raw",
				"version": 2,
				"tests": "function arraysEqual(a, b) {\n  if (a === b) return true;\n  if (a == null || b == null) return false;\n  if (a.length != b.length) return false;\n\n  // If you don't care about the order of the elements inside\n  // the array, you should sort both arrays here.\n\n  for (var i = 0; i < a.length; ++i) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}\n\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar json = JSON.parse(responseBody);\ntests[\"Correct json values\"] = \n    typeof json.timestamp === \"string\" &&\n    typeof json.domains === \"object\" && Array.isArray(json.domains) &&\n    typeof json.goodAnswers === \"number\" &&\n    typeof json._id === \"string\" &&\n    typeof json.surrender === \"boolean\" &&\n    json.totalAnswers === 1000 &&\n    json._id === postman.getGlobalVariable(\"test_id\") &&\n    arraysEqual(json.domains, [\"CSS3\", \"HTML5\"]);",
				"currentHelper": "normal",
				"helperAttributes": {},
				"time": 1478584693959,
				"name": "GET /api/result/last",
				"description": "",
				"collectionId": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
				"responses": []
			},
			{
				"id": "44a6ffd2-191d-007e-76d0-e00ba386c6e1",
				"headers": "Content-Type: application/json\nAccept: image/jpeg\n",
				"url": "localhost:3000/api/question",
				"preRequestScript": null,
				"pathVariables": {},
				"method": "POST",
				"data": "{\n\t\"domain\" : \"CSS2345\",\n\t\"answers\": [ \"oui\", \"non\", \"tais toi hostie\"],\n\t\"goodAnswer\": 2\n}",
				"dataMode": "raw",
				"version": 2,
				"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;",
				"currentHelper": "normal",
				"helperAttributes": {},
				"time": 1478470133974,
				"name": "localhost:3000/api/question",
				"description": "Question request with a missing field",
				"collectionId": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
				"responses": []
			},
			{
				"id": "46aaf5fd-576e-2b5b-a9ee-38313f2b836e",
				"headers": "Content-Type: application/json\n//Accept: image/jpeg\n",
				"url": "localhost:3000/api/user",
				"preRequestScript": "",
				"pathVariables": {},
				"method": "GET",
				"data": "",
				"dataMode": "raw",
				"version": 2,
				"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar json = JSON.parse(responseBody);\ntests[\"Your test name\"] = typeof json === \"object\";",
				"currentHelper": "normal",
				"helperAttributes": {},
				"time": 1478588119707,
				"name": "GET /api/result/",
				"description": "",
				"collectionId": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
				"responses": []
			},
			{
				"id": "4836112b-2179-9989-ffa7-5c15ea9e2414",
				"headers": "Content-Type: application/json\nAccept: image/jpeg\n",
				"url": "localhost:3000/api/result/:id",
				"preRequestScript": "",
				"pathVariables": {
					"id": "{{test_id}}"
				},
				"method": "GET",
				"data": "{\n  \"domains\": [\"CSS3\",\"HTML5\"],\n  \"timestamp\": 1478580308514,\n  \"goodAnswers\": 5,\n  \"totalAnswers\": 10,\n  \"surrender\": false\n}",
				"dataMode": "raw",
				"version": 2,
				"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;",
				"currentHelper": "normal",
				"helperAttributes": {},
				"time": 1478583301354,
				"name": "GET /api/result/:id (with wrong id)",
				"description": "",
				"collectionId": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
				"responses": []
			},
			{
				"id": "5b0785af-37c2-ce9d-97cf-82feb29e6899",
				"headers": "Content-Type: application/json\nAccept: image/jpeg\n",
				"url": "localhost:3000/api/question",
				"preRequestScript": null,
				"pathVariables": {},
				"method": "POST",
				"data": "{\n\t\"question\": \"est-ce que ça va ?\",\n\t\"domain\" : \"CSS2345\",\n\t\"answers\": [ \"oui\"],\n\t\"goodAnswer\": 2\n}",
				"dataMode": "raw",
				"version": 2,
				"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;",
				"currentHelper": "normal",
				"helperAttributes": {},
				"time": 1478470127565,
				"name": "localhost:3000/api/question",
				"description": "Question request with not enough answers",
				"collectionId": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
				"responses": []
			},
			{
				"id": "60c9cbc7-d535-3f89-89ed-890b4a18fbc9",
				"headers": "Content-Type: application/json\nAccept: image/jpeg\n",
				"url": "localhost:3000/api/result/last",
				"pathVariables": {},
				"preRequestScript": "",
				"method": "GET",
				"collectionId": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
				"data": "{\n  \"domains\": [\"CSS3\",\"HTML5\"],\n  \"timestamp\": 1478580308514,\n  \"goodAnswers\": 5,\n  \"totalAnswers\": 10,\n  \"surrender\": false\n}",
				"dataMode": "raw",
				"name": "GET /api/result/last (with no elements)",
				"description": "",
				"descriptionFormat": "html",
				"time": 1478583564999,
				"version": 2,
				"responses": [],
				"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;",
				"currentHelper": "normal",
				"helperAttributes": {},
				"folder": "109ad8db-b476-16a9-1a3d-477e6aa70a21"
			},
			{
				"id": "7a5a2e8a-4a9e-3bb7-3aab-4cb0f0cbf51f",
				"headers": "Content-Type: application/json\nAccept: image/jpeg\n",
				"url": "localhost:3000/api/question",
				"preRequestScript": null,
				"pathVariables": {},
				"method": "POST",
				"data": "{\n\t\"question\": \"est-ce que ça va ?\",\n\t\"domain\" : \"CSS2345\",\n\t\"answers\": [ \"oui\", \"\", \"tais toi hostie\"],\n\t\"goodAnswer\": 2\n}",
				"dataMode": "raw",
				"version": 2,
				"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;",
				"currentHelper": "normal",
				"helperAttributes": {},
				"time": 1478470120200,
				"name": "localhost:3000/api/question",
				"description": "Question request with a wrong array (empty value)",
				"collectionId": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
				"responses": []
			},
			{
				"id": "80230551-19b3-8714-0512-e3dac54f35cf",
				"headers": "Content-Type: application/json\n",
				"url": "localhost:3000/api/result/:id",
				"preRequestScript": "",
				"pathVariables": {
					"id": "{{test_id}}"
				},
				"method": "DELETE",
				"data": "",
				"dataMode": "raw",
				"version": 2,
				"tests": "tests[\"Status code is 204\"] = responseCode.code === 204;",
				"currentHelper": "normal",
				"helperAttributes": {},
				"time": 1478582771365,
				"name": "DELETE /api/result/:id",
				"description": "",
				"collectionId": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
				"responses": []
			},
			{
				"id": "86938958-53b1-947f-f643-1a5f9a665ab3",
				"headers": "Content-Type: application/json\nAccept: image/jpeg\n",
				"url": "localhost:3000/api/result",
				"preRequestScript": "",
				"pathVariables": {},
				"method": "DELETE",
				"data": "",
				"dataMode": "raw",
				"version": 2,
				"tests": "tests[\"Status code is 204\"] = responseCode.code === 204;",
				"currentHelper": "normal",
				"helperAttributes": {},
				"time": 1478581144227,
				"name": "DELETE /api/result/",
				"description": "",
				"collectionId": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
				"responses": []
			},
			{
				"id": "8a772ee2-3a1e-3174-fe1c-104158dd207d",
				"headers": "Content-Type: application/json\nAccept: image/jpeg\n",
				"url": "localhost:3000/api/result",
				"preRequestScript": "",
				"pathVariables": {},
				"method": "GET",
				"data": "{\n  \"domains\": [\"CSS3\",\"HTML5\"],\n  \"timestamp\": 1478580308514,\n  \"goodAnswers\": 5,\n  \"totalAnswers\": 10,\n  \"surrender\": false\n}",
				"dataMode": "raw",
				"version": 2,
				"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar json = JSON.parse(responseBody);\ntests[\"get a length 1 array\"] = json.length === 1;",
				"currentHelper": "normal",
				"helperAttributes": {},
				"time": 1478581285852,
				"name": "GET /api/result",
				"description": "",
				"collectionId": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
				"responses": []
			},
			{
				"id": "8f2d9b89-5324-f3ff-c2c8-e175ed170f34",
				"headers": "",
				"url": "localhost:3000/api/statistics",
				"preRequestScript": null,
				"pathVariables": {},
				"method": "GET",
				"data": null,
				"dataMode": "params",
				"version": 2,
				"tests": "var json = JSON.parse(responseBody);\n\n\npostman.setGlobalVariable(\"test_answers\", json.answers);\npostman.setGlobalVariable(\"test_goodAnswers\", json.goodAnswers);",
				"currentHelper": "normal",
				"helperAttributes": {},
				"time": 1478628393556,
				"name": "/api/statistics - create global variables",
				"description": "",
				"collectionId": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
				"responses": []
			},
			{
				"id": "9a772097-ebba-916a-2b2e-0cdb8c5a40fc",
				"headers": "Content-Type: application/json\nAccept: image/jpeg\n",
				"url": "localhost:3000/api/question/short/domains/notArealdomain",
				"pathVariables": {},
				"preRequestScript": null,
				"method": "GET",
				"collectionId": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
				"data": "{\n\t\"posted\": \"post\"\n}",
				"dataMode": "raw",
				"name": "localhost:3000/api/question/short/domains/notArealdomain",
				"description": "Get a random question",
				"descriptionFormat": "html",
				"time": 1477678175783,
				"version": 2,
				"responses": [],
				"tests": "var jsonData = JSON.parse(responseBody);\ntests[\"data has an error text\"] = typeof jsonData.error === \"string\";\ntests[\"data has parameters\"] = typeof jsonData.params === \"object\";\n\ntests[\"Status code is 404\"] = responseCode.code === 404;",
				"currentHelper": "normal",
				"helperAttributes": {},
				"folder": "7a989fb5-2ddf-46bb-546b-1c01a48d0d40"
			},
			{
				"id": "b957c937-da05-69b2-a343-559845e38bf6",
				"headers": "Content-Type: application/json\n//Accept: image/jpeg\n",
				"url": "localhost:3000/api/user",
				"preRequestScript": "",
				"pathVariables": {},
				"method": "PATCH",
				"data": "{ \"lol\":\"cat\" }",
				"dataMode": "raw",
				"version": 2,
				"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\n\ntests[\"Empty body\"] = !responseBody;",
				"currentHelper": "normal",
				"helperAttributes": {},
				"time": 1478588588876,
				"name": "/api/result/ — change a wrong field",
				"description": "",
				"collectionId": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
				"responses": []
			},
			{
				"id": "d25f9f02-2a31-9832-3be9-d7f5bca5ffe1",
				"headers": "",
				"url": "localhost:3000/api/statistics",
				"preRequestScript": null,
				"pathVariables": {},
				"method": "GET",
				"data": null,
				"dataMode": "params",
				"version": 2,
				"tests": "var json = JSON.parse(responseBody);\n\n\ntests[\"json values are incremented\"] = 1 + parseInt(postman.getGlobalVariable(\"test_answers\")) === json.answers &&\n1 + parseInt(postman.getGlobalVariable(\"test_goodAnswers\")) === json.goodAnswers;",
				"currentHelper": "normal",
				"helperAttributes": {},
				"time": 1478628584000,
				"name": "/api/statistics - test increment",
				"description": "",
				"collectionId": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
				"responses": []
			},
			{
				"id": "d70ccbf2-e9af-7084-ad5e-3437f0b45537",
				"headers": "Content-Type: application/json\nAccept: image/jpeg\n",
				"url": "localhost:3000/api/statistics/increment",
				"pathVariables": {},
				"preRequestScript": "",
				"method": "PATCH",
				"collectionId": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
				"data": "{\n  \"goodAnswers\": 1,\n  \"answers\": 1\n}",
				"dataMode": "raw",
				"name": "/api/statistics/increment",
				"description": "",
				"descriptionFormat": "html",
				"time": 1478628219541,
				"version": 2,
				"responses": [],
				"tests": "\n",
				"currentHelper": "normal",
				"helperAttributes": {},
				"folder": "7a989fb5-2ddf-46bb-546b-1c01a48d0d40"
			},
			{
				"id": "d9cf1fa7-b27c-1d52-fb47-55a41b3e2c8c",
				"headers": "Content-Type: application/json\nAccept: image/jpeg\n",
				"url": "localhost:3000/api/result",
				"preRequestScript": "",
				"pathVariables": {},
				"method": "POST",
				"data": "{\n  \"domains\": [\"CSS3\",\"HTML5\"],\n  \"timestamp\": {{$timestamp}},\n  \"goodAnswers\": {{$randomInt}},\n  \"totalAnswers\": 1000,\n  \"surrender\": false\n}",
				"dataMode": "raw",
				"version": 2,
				"tests": "function arraysEqual(a, b) {\n  if (a === b) return true;\n  if (a == null || b == null) return false;\n  if (a.length != b.length) return false;\n\n  // If you don't care about the order of the elements inside\n  // the array, you should sort both arrays here.\n\n  for (var i = 0; i < a.length; ++i) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}\n\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\n\nvar json = JSON.parse(responseBody);\ntests[\"Correct json values\"] = \n    typeof json.timestamp === \"string\" &&\n    typeof json.domains === \"object\" && Array.isArray(json.domains) &&\n    typeof json.goodAnswers === \"number\" &&\n    typeof json._id === \"string\" &&\n    typeof json.surrender === \"boolean\" &&\n    json.totalAnswers === 1000 &&\n    arraysEqual(json.domains, [\"CSS3\", \"HTML5\"]);\n    \n\n\npostman.setGlobalVariable(\"test_id\", json._id);\n",
				"currentHelper": "normal",
				"helperAttributes": {},
				"time": 1478582461288,
				"name": "POST /api/result/",
				"description": "",
				"collectionId": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
				"responses": []
			},
			{
				"id": "dedfe489-606d-90c7-fc55-59b5bb3a66bc",
				"headers": "Content-Type: application/json\nAccept: image/jpeg\n",
				"url": "localhost:3000/api/result",
				"preRequestScript": "",
				"pathVariables": {},
				"method": "POST",
				"data": "{\n  \"domains\": [\"CSS3\",\"HTML5\"],\n  \"timestamp\": {{$timestamp}},\n  \"goodAnswers\": {{$randomInt}},\n  \"totalAnswers\": 1000,\n  \"surrender\": false\n}",
				"dataMode": "raw",
				"version": 2,
				"tests": "function arraysEqual(a, b) {\n  if (a === b) return true;\n  if (a == null || b == null) return false;\n  if (a.length != b.length) return false;\n\n  // If you don't care about the order of the elements inside\n  // the array, you should sort both arrays here.\n\n  for (var i = 0; i < a.length; ++i) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}\n\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\n\nvar json = JSON.parse(responseBody);\ntests[\"Correct json values\"] = \n    typeof json.timestamp === \"string\" &&\n    typeof json.domains === \"object\" && Array.isArray(json.domains) &&\n    typeof json.goodAnswers === \"number\" &&\n    typeof json._id === \"string\" &&\n    typeof json.surrender === \"boolean\" &&\n    json.totalAnswers === 1000 &&\n    arraysEqual(json.domains, [\"CSS3\", \"HTML5\"]);\n    \n\n\npostman.setGlobalVariable(\"test_id\", json._id);\n",
				"currentHelper": "normal",
				"helperAttributes": {},
				"time": 1478582461288,
				"name": "POST /api/result/",
				"description": "",
				"collectionId": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
				"responses": [],
				"folder": "109ad8db-b476-16a9-1a3d-477e6aa70a21"
			},
			{
				"id": "e5052664-fe49-ad05-9d86-2dd2a0e99ba8",
				"headers": "Content-Type: application/json\n//Accept: image/jpeg\n",
				"url": "localhost:3000/api/user",
				"preRequestScript": "",
				"pathVariables": {},
				"method": "PATCH",
				"data": "{ \"name\":\"ulysse\" }",
				"dataMode": "raw",
				"version": 2,
				"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\n\ntests[\"Empty body\"] = !responseBody;",
				"currentHelper": "normal",
				"helperAttributes": {},
				"time": 1478588560600,
				"name": "/api/result/ — change name",
				"description": "",
				"collectionId": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
				"responses": []
			},
			{
				"id": "ea9d9fb2-c9ff-5ae3-5b07-d1b0775aed32",
				"headers": "Content-Type: application/json\nAccept: image/jpeg\n",
				"url": "localhost:3000/api/result/:id",
				"preRequestScript": "",
				"pathVariables": {
					"id": "{{test_id}}"
				},
				"method": "GET",
				"data": "{\n  \"domains\": [\"CSS3\",\"HTML5\"],\n  \"timestamp\": 1478580308514,\n  \"goodAnswers\": 5,\n  \"totalAnswers\": 10,\n  \"surrender\": false\n}",
				"dataMode": "raw",
				"version": 2,
				"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
				"currentHelper": "normal",
				"helperAttributes": {},
				"time": 1478582538375,
				"name": "GET /api/result/:id",
				"description": "",
				"collectionId": "0b249a44-1b6b-132f-c3ae-ce45bb0c0324",
				"responses": []
			}
		],
		"timestamp": 1477678044723,
		"synced": false,
		"syncedFilename": "",
		"remote_id": 0,
		"remoteLink": "",
		"remoteLinkUpdatedAt": null,
		"public": false,
		"owner": "877335",
		"subscribed": false,
		"createdAt": 1477678044768,
		"updatedAt": 1478628699580,
		"write": true,
		"isDeleted": false,
		"published": false,
		"favorite": false,
		"permissions": {},
		"syncedPermissions": {}
	},
	"folder": null,
	"environment": null,
	"globals": [],
	"results": [
		{
			"id": "0c9bbae9-6b77-b1c3-4e32-c1b789a9e9d1",
			"name": "localhost:3000/api/question/short/domains/",
			"url": "localhost:3000/api/question/short/domains/",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
			},
			"tests": {
				"data has an id": true,
				"data has a domain": true,
				"data has a question": true,
				"data has answers": true,
				"minimum two answers": true
			},
			"testPassFailCounts": {
				"data has an id": {
					"pass": 1,
					"fail": 0
				},
				"data has a domain": {
					"pass": 1,
					"fail": 0
				},
				"data has a question": {
					"pass": 1,
					"fail": 0
				},
				"data has answers": {
					"pass": 1,
					"fail": 0
				},
				"minimum two answers": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				193
			],
			"allTests": [
				{
					"data has an id": true,
					"data has a domain": true,
					"data has a question": true,
					"data has answers": true,
					"minimum two answers": true
				}
			],
			"time": 193,
			"totalRequestTime": 193,
			"iterationResults": {}
		},
		{
			"id": "9a772097-ebba-916a-2b2e-0cdb8c5a40fc",
			"name": "localhost:3000/api/question/short/domains/notArealdomain",
			"url": "localhost:3000/api/question/short/domains/notArealdomain",
			"totalTime": 0,
			"responseCode": {
				"code": 404,
				"name": "Not Found",
				"detail": "The requested resource could not be found but may be available again in the future. Subsequent requests by the client are permissible."
			},
			"tests": {
				"data has an error text": true,
				"data has parameters": true,
				"Status code is 404": true
			},
			"testPassFailCounts": {
				"data has an error text": {
					"pass": 1,
					"fail": 0
				},
				"data has parameters": {
					"pass": 1,
					"fail": 0
				},
				"Status code is 404": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				148
			],
			"allTests": [
				{
					"data has an error text": true,
					"data has parameters": true,
					"Status code is 404": true
				}
			],
			"time": 148,
			"totalRequestTime": 148,
			"iterationResults": {}
		},
		{
			"id": "0ba195f5-9efb-11ee-572c-d7435f4dc691",
			"name": "localhost:3000/api/question/short/domains/10000000000",
			"url": "localhost:3000/api/question/short/domains/10000000000",
			"totalTime": 0,
			"responseCode": {
				"code": 404,
				"name": "Not Found",
				"detail": "The requested resource could not be found but may be available again in the future. Subsequent requests by the client are permissible."
			},
			"tests": {
				"data has an error text, 'No question in these domains.'": true,
				"data has parameters": true,
				"Status code is 404": true
			},
			"testPassFailCounts": {
				"data has an error text, 'No question in these domains.'": {
					"pass": 1,
					"fail": 0
				},
				"data has parameters": {
					"pass": 1,
					"fail": 0
				},
				"Status code is 404": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				154
			],
			"allTests": [
				{
					"data has an error text, 'No question in these domains.'": true,
					"data has parameters": true,
					"Status code is 404": true
				}
			],
			"time": 154,
			"totalRequestTime": 154,
			"iterationResults": {}
		},
		{
			"id": "8f2d9b89-5324-f3ff-c2c8-e175ed170f34",
			"name": "/api/statistics - create global variables",
			"url": "localhost:3000/api/statistics",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
			},
			"tests": {},
			"testPassFailCounts": {},
			"times": [
				92
			],
			"allTests": [
				{}
			],
			"time": 92,
			"totalRequestTime": 92,
			"iterationResults": {}
		},
		{
			"id": "d70ccbf2-e9af-7084-ad5e-3437f0b45537",
			"name": "/api/statistics/increment",
			"url": "localhost:3000/api/statistics/increment",
			"totalTime": 0,
			"responseCode": {
				"code": 204,
				"name": "No Content",
				"detail": "The server successfully processed the request, but is not returning any content."
			},
			"tests": {},
			"testPassFailCounts": {},
			"times": [
				165
			],
			"allTests": [
				{}
			],
			"time": 165,
			"totalRequestTime": 165,
			"iterationResults": {}
		},
		{
			"id": "d25f9f02-2a31-9832-3be9-d7f5bca5ffe1",
			"name": "/api/statistics - test increment",
			"url": "localhost:3000/api/statistics",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
			},
			"tests": {
				"json values are incremented": true
			},
			"testPassFailCounts": {
				"json values are incremented": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				105
			],
			"allTests": [
				{
					"json values are incremented": true
				}
			],
			"time": 105,
			"totalRequestTime": 105,
			"iterationResults": {}
		},
		{
			"id": "16033ef3-faee-bd44-fbfb-54b11d78a194",
			"name": "/api/statistics",
			"url": "localhost:3000/api/statistics",
			"totalTime": 0,
			"responseCode": {
				"code": 204,
				"name": "No Content",
				"detail": "The server successfully processed the request, but is not returning any content."
			},
			"tests": {
				"Status code is 204": true
			},
			"testPassFailCounts": {
				"Status code is 204": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				101
			],
			"allTests": [
				{
					"Status code is 204": true
				}
			],
			"time": 101,
			"totalRequestTime": 101,
			"iterationResults": {}
		},
		{
			"id": "1bdb438a-6a54-924f-db8d-822b03236d27",
			"name": "/api/statistics - test deletion",
			"url": "localhost:3000/api/statistics",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
			},
			"tests": {
				"json values are incremented": true
			},
			"testPassFailCounts": {
				"json values are incremented": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				130
			],
			"allTests": [
				{
					"json values are incremented": true
				}
			],
			"time": 130,
			"totalRequestTime": 130,
			"iterationResults": {}
		},
		{
			"id": "169ce8ba-057b-2ab1-a1bc-426cdef3c632",
			"name": "localhost:3000/api/question",
			"url": "localhost:3000/api/question",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": "The request cannot be fulfilled due to bad syntax."
			},
			"tests": {
				"Status code is 400": true
			},
			"testPassFailCounts": {
				"Status code is 400": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				45
			],
			"allTests": [
				{
					"Status code is 400": true
				}
			],
			"time": 45,
			"totalRequestTime": 45,
			"iterationResults": {}
		},
		{
			"id": "163e9842-3854-58fd-407f-ff343a5555a7",
			"name": "localhost:3000/api/question",
			"url": "localhost:3000/api/question",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": "The request cannot be fulfilled due to bad syntax."
			},
			"tests": {
				"Status code is 400": true
			},
			"testPassFailCounts": {
				"Status code is 400": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				38
			],
			"allTests": [
				{
					"Status code is 400": true
				}
			],
			"time": 38,
			"totalRequestTime": 38,
			"iterationResults": {}
		},
		{
			"id": "7a5a2e8a-4a9e-3bb7-3aab-4cb0f0cbf51f",
			"name": "localhost:3000/api/question",
			"url": "localhost:3000/api/question",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": "The request cannot be fulfilled due to bad syntax."
			},
			"tests": {
				"Status code is 400": true
			},
			"testPassFailCounts": {
				"Status code is 400": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				41
			],
			"allTests": [
				{
					"Status code is 400": true
				}
			],
			"time": 41,
			"totalRequestTime": 41,
			"iterationResults": {}
		},
		{
			"id": "5b0785af-37c2-ce9d-97cf-82feb29e6899",
			"name": "localhost:3000/api/question",
			"url": "localhost:3000/api/question",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": "The request cannot be fulfilled due to bad syntax."
			},
			"tests": {
				"Status code is 400": true
			},
			"testPassFailCounts": {
				"Status code is 400": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				41
			],
			"allTests": [
				{
					"Status code is 400": true
				}
			],
			"time": 41,
			"totalRequestTime": 41,
			"iterationResults": {}
		},
		{
			"id": "44a6ffd2-191d-007e-76d0-e00ba386c6e1",
			"name": "localhost:3000/api/question",
			"url": "localhost:3000/api/question",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": "The request cannot be fulfilled due to bad syntax."
			},
			"tests": {
				"Status code is 400": true
			},
			"testPassFailCounts": {
				"Status code is 400": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				52
			],
			"allTests": [
				{
					"Status code is 400": true
				}
			],
			"time": 52,
			"totalRequestTime": 52,
			"iterationResults": {}
		},
		{
			"id": "1d74f4f0-1b93-ca18-e3e9-b377841ed352",
			"name": "localhost:3000/api/question",
			"url": "localhost:3000/api/question",
			"totalTime": 0,
			"responseCode": {
				"code": 201,
				"name": "Created",
				"detail": "The request has been fulfilled and resulted in a new resource being created."
			},
			"tests": {
				"Status code is 201": true
			},
			"testPassFailCounts": {
				"Status code is 201": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				198
			],
			"allTests": [
				{
					"Status code is 201": true
				}
			],
			"time": 198,
			"totalRequestTime": 198,
			"iterationResults": {}
		},
		{
			"id": "86938958-53b1-947f-f643-1a5f9a665ab3",
			"name": "DELETE /api/result/",
			"url": "localhost:3000/api/result",
			"totalTime": 0,
			"responseCode": {
				"code": 204,
				"name": "No Content",
				"detail": "The server successfully processed the request, but is not returning any content."
			},
			"tests": {
				"Status code is 204": true
			},
			"testPassFailCounts": {
				"Status code is 204": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				123
			],
			"allTests": [
				{
					"Status code is 204": true
				}
			],
			"time": 123,
			"totalRequestTime": 123,
			"iterationResults": {}
		},
		{
			"id": "d9cf1fa7-b27c-1d52-fb47-55a41b3e2c8c",
			"name": "POST /api/result/",
			"url": "localhost:3000/api/result",
			"totalTime": 0,
			"responseCode": {
				"code": 201,
				"name": "Created",
				"detail": "The request has been fulfilled and resulted in a new resource being created."
			},
			"tests": {
				"Status code is 201": true,
				"Correct json values": true
			},
			"testPassFailCounts": {
				"Status code is 201": {
					"pass": 1,
					"fail": 0
				},
				"Correct json values": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				127
			],
			"allTests": [
				{
					"Status code is 201": true,
					"Correct json values": true
				}
			],
			"time": 127,
			"totalRequestTime": 127,
			"iterationResults": {}
		},
		{
			"id": "8a772ee2-3a1e-3174-fe1c-104158dd207d",
			"name": "GET /api/result",
			"url": "localhost:3000/api/result",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
			},
			"tests": {
				"Status code is 200": true,
				"get a length 1 array": true
			},
			"testPassFailCounts": {
				"Status code is 200": {
					"pass": 1,
					"fail": 0
				},
				"get a length 1 array": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				164
			],
			"allTests": [
				{
					"Status code is 200": true,
					"get a length 1 array": true
				}
			],
			"time": 164,
			"totalRequestTime": 164,
			"iterationResults": {}
		},
		{
			"id": "ea9d9fb2-c9ff-5ae3-5b07-d1b0775aed32",
			"name": "GET /api/result/:id",
			"url": "localhost:3000/api/result/:id",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
			},
			"tests": {
				"Status code is 200": true
			},
			"testPassFailCounts": {
				"Status code is 200": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				67
			],
			"allTests": [
				{
					"Status code is 200": true
				}
			],
			"time": 67,
			"totalRequestTime": 67,
			"iterationResults": {}
		},
		{
			"id": "80230551-19b3-8714-0512-e3dac54f35cf",
			"name": "DELETE /api/result/:id",
			"url": "localhost:3000/api/result/:id",
			"totalTime": 0,
			"responseCode": {
				"code": 204,
				"name": "No Content",
				"detail": "The server successfully processed the request, but is not returning any content."
			},
			"tests": {
				"Status code is 204": true
			},
			"testPassFailCounts": {
				"Status code is 204": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				108
			],
			"allTests": [
				{
					"Status code is 204": true
				}
			],
			"time": 108,
			"totalRequestTime": 108,
			"iterationResults": {}
		},
		{
			"id": "4836112b-2179-9989-ffa7-5c15ea9e2414",
			"name": "GET /api/result/:id (with wrong id)",
			"url": "localhost:3000/api/result/:id",
			"totalTime": 0,
			"responseCode": {
				"code": 404,
				"name": "Not Found",
				"detail": "The requested resource could not be found but may be available again in the future. Subsequent requests by the client are permissible."
			},
			"tests": {
				"Status code is 404": true
			},
			"testPassFailCounts": {
				"Status code is 404": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				126
			],
			"allTests": [
				{
					"Status code is 404": true
				}
			],
			"time": 126,
			"totalRequestTime": 126,
			"iterationResults": {}
		},
		{
			"id": "60c9cbc7-d535-3f89-89ed-890b4a18fbc9",
			"name": "GET /api/result/last (with no elements)",
			"url": "localhost:3000/api/result/last",
			"totalTime": 0,
			"responseCode": {
				"code": 404,
				"name": "Not Found",
				"detail": "The requested resource could not be found but may be available again in the future. Subsequent requests by the client are permissible."
			},
			"tests": {
				"Status code is 404": true
			},
			"testPassFailCounts": {
				"Status code is 404": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				119
			],
			"allTests": [
				{
					"Status code is 404": true
				}
			],
			"time": 119,
			"totalRequestTime": 119,
			"iterationResults": {}
		},
		{
			"id": "dedfe489-606d-90c7-fc55-59b5bb3a66bc",
			"name": "POST /api/result/",
			"url": "localhost:3000/api/result",
			"totalTime": 0,
			"responseCode": {
				"code": 201,
				"name": "Created",
				"detail": "The request has been fulfilled and resulted in a new resource being created."
			},
			"tests": {
				"Status code is 201": true,
				"Correct json values": true
			},
			"testPassFailCounts": {
				"Status code is 201": {
					"pass": 1,
					"fail": 0
				},
				"Correct json values": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				136
			],
			"allTests": [
				{
					"Status code is 201": true,
					"Correct json values": true
				}
			],
			"time": 136,
			"totalRequestTime": 136,
			"iterationResults": {}
		},
		{
			"id": "3d9f0ea3-c333-84e3-cb81-e37dc8267ed7",
			"name": "GET /api/result/last",
			"url": "localhost:3000/api/result/last",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
			},
			"tests": {
				"Status code is 200": true,
				"Correct json values": true
			},
			"testPassFailCounts": {
				"Status code is 200": {
					"pass": 1,
					"fail": 0
				},
				"Correct json values": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				143
			],
			"allTests": [
				{
					"Status code is 200": true,
					"Correct json values": true
				}
			],
			"time": 143,
			"totalRequestTime": 143,
			"iterationResults": {}
		},
		{
			"id": "46aaf5fd-576e-2b5b-a9ee-38313f2b836e",
			"name": "GET /api/result/",
			"url": "localhost:3000/api/user",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
			},
			"tests": {
				"Status code is 200": true,
				"Your test name": true
			},
			"testPassFailCounts": {
				"Status code is 200": {
					"pass": 1,
					"fail": 0
				},
				"Your test name": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				94
			],
			"allTests": [
				{
					"Status code is 200": true,
					"Your test name": true
				}
			],
			"time": 94,
			"totalRequestTime": 94,
			"iterationResults": {}
		},
		{
			"id": "e5052664-fe49-ad05-9d86-2dd2a0e99ba8",
			"name": "/api/result/ — change name",
			"url": "localhost:3000/api/user",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
			},
			"tests": {
				"Status code is 200": true,
				"Empty body": true
			},
			"testPassFailCounts": {
				"Status code is 200": {
					"pass": 1,
					"fail": 0
				},
				"Empty body": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				121
			],
			"allTests": [
				{
					"Status code is 200": true,
					"Empty body": true
				}
			],
			"time": 121,
			"totalRequestTime": 121,
			"iterationResults": {}
		},
		{
			"id": "b957c937-da05-69b2-a343-559845e38bf6",
			"name": "/api/result/ — change a wrong field",
			"url": "localhost:3000/api/user",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": "The request cannot be fulfilled due to bad syntax."
			},
			"tests": {
				"Status code is 400": true,
				"Empty body": true
			},
			"testPassFailCounts": {
				"Status code is 400": {
					"pass": 1,
					"fail": 0
				},
				"Empty body": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				21
			],
			"allTests": [
				{
					"Status code is 400": true,
					"Empty body": true
				}
			],
			"time": 21,
			"totalRequestTime": 21,
			"iterationResults": {}
		}
	],
	"totalPass": 39,
	"totalFail": 0,
	"totalTime": 2852,
	"lifecycle": "done",
	"willStop": false,
	"requests": [
		{
			"name": "localhost:3000/api/question/short/domains/",
			"id": "0c9bbae9-6b77-b1c3-4e32-c1b789a9e9d1",
			"url": "localhost:3000/api/question/short/domains/",
			"time": 193,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
			},
			"testPassFailCounts": {
				"data has an id": {
					"pass": 1,
					"fail": 0
				},
				"data has a domain": {
					"pass": 1,
					"fail": 0
				},
				"data has a question": {
					"pass": 1,
					"fail": 0
				},
				"data has answers": {
					"pass": 1,
					"fail": 0
				},
				"minimum two answers": {
					"pass": 1,
					"fail": 0
				}
			},
			"gridTitles": [
				"data has an id",
				"data has a domain",
				"data has a question",
				"data has answers",
				"minimum two answers"
			],
			"gridData": [
				[
					true,
					true,
					true,
					true,
					true
				]
			],
			"tests": {
				"data has an id": true,
				"data has a domain": true,
				"data has a question": true,
				"data has answers": true,
				"minimum two answers": true
			}
		},
		{
			"name": "localhost:3000/api/question/short/domains/notArealdomain",
			"id": "9a772097-ebba-916a-2b2e-0cdb8c5a40fc",
			"url": "localhost:3000/api/question/short/domains/notArealdomain",
			"time": 148,
			"responseCode": {
				"code": 404,
				"name": "Not Found",
				"detail": "The requested resource could not be found but may be available again in the future. Subsequent requests by the client are permissible."
			},
			"testPassFailCounts": {
				"data has an error text": {
					"pass": 1,
					"fail": 0
				},
				"data has parameters": {
					"pass": 1,
					"fail": 0
				},
				"Status code is 404": {
					"pass": 1,
					"fail": 0
				}
			},
			"gridTitles": [
				"data has an error text",
				"data has parameters",
				"Status code is 404"
			],
			"gridData": [
				[
					true,
					true,
					true
				]
			],
			"tests": {
				"data has an error text": true,
				"data has parameters": true,
				"Status code is 404": true
			}
		},
		{
			"name": "localhost:3000/api/question/short/domains/10000000000",
			"id": "0ba195f5-9efb-11ee-572c-d7435f4dc691",
			"url": "localhost:3000/api/question/short/domains/10000000000",
			"time": 154,
			"responseCode": {
				"code": 404,
				"name": "Not Found",
				"detail": "The requested resource could not be found but may be available again in the future. Subsequent requests by the client are permissible."
			},
			"testPassFailCounts": {
				"data has an error text, 'No question in these domains.'": {
					"pass": 1,
					"fail": 0
				},
				"data has parameters": {
					"pass": 1,
					"fail": 0
				},
				"Status code is 404": {
					"pass": 1,
					"fail": 0
				}
			},
			"gridTitles": [
				"data has an error text, 'No question in these domains.'",
				"data has parameters",
				"Status code is 404"
			],
			"gridData": [
				[
					true,
					true,
					true
				]
			],
			"tests": {
				"data has an error text, 'No question in these domains.'": true,
				"data has parameters": true,
				"Status code is 404": true
			}
		},
		{
			"name": "/api/statistics - create global variables",
			"id": "8f2d9b89-5324-f3ff-c2c8-e175ed170f34",
			"url": "localhost:3000/api/statistics",
			"time": 92,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
			},
			"testPassFailCounts": {},
			"gridTitles": [],
			"gridData": [
				[]
			],
			"tests": {}
		},
		{
			"name": "/api/statistics/increment",
			"id": "d70ccbf2-e9af-7084-ad5e-3437f0b45537",
			"url": "localhost:3000/api/statistics/increment",
			"time": 165,
			"responseCode": {
				"code": 204,
				"name": "No Content",
				"detail": "The server successfully processed the request, but is not returning any content."
			},
			"testPassFailCounts": {},
			"gridTitles": [],
			"gridData": [
				[]
			],
			"tests": {}
		},
		{
			"name": "/api/statistics - test increment",
			"id": "d25f9f02-2a31-9832-3be9-d7f5bca5ffe1",
			"url": "localhost:3000/api/statistics",
			"time": 105,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
			},
			"testPassFailCounts": {
				"json values are incremented": {
					"pass": 1,
					"fail": 0
				}
			},
			"gridTitles": [
				"json values are incremented"
			],
			"gridData": [
				[
					true
				]
			],
			"tests": {
				"json values are incremented": true
			}
		},
		{
			"name": "/api/statistics",
			"id": "16033ef3-faee-bd44-fbfb-54b11d78a194",
			"url": "localhost:3000/api/statistics",
			"time": 101,
			"responseCode": {
				"code": 204,
				"name": "No Content",
				"detail": "The server successfully processed the request, but is not returning any content."
			},
			"testPassFailCounts": {
				"Status code is 204": {
					"pass": 1,
					"fail": 0
				}
			},
			"gridTitles": [
				"Status code is 204"
			],
			"gridData": [
				[
					true
				]
			],
			"tests": {
				"Status code is 204": true
			}
		},
		{
			"name": "/api/statistics - test deletion",
			"id": "1bdb438a-6a54-924f-db8d-822b03236d27",
			"url": "localhost:3000/api/statistics",
			"time": 130,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
			},
			"testPassFailCounts": {
				"json values are incremented": {
					"pass": 1,
					"fail": 0
				}
			},
			"gridTitles": [
				"json values are incremented"
			],
			"gridData": [
				[
					true
				]
			],
			"tests": {
				"json values are incremented": true
			}
		},
		{
			"name": "localhost:3000/api/question",
			"id": "169ce8ba-057b-2ab1-a1bc-426cdef3c632",
			"url": "localhost:3000/api/question",
			"time": 45,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": "The request cannot be fulfilled due to bad syntax."
			},
			"testPassFailCounts": {
				"Status code is 400": {
					"pass": 1,
					"fail": 0
				}
			},
			"gridTitles": [
				"Status code is 400"
			],
			"gridData": [
				[
					true
				]
			],
			"tests": {
				"Status code is 400": true
			}
		},
		{
			"name": "localhost:3000/api/question",
			"id": "163e9842-3854-58fd-407f-ff343a5555a7",
			"url": "localhost:3000/api/question",
			"time": 38,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": "The request cannot be fulfilled due to bad syntax."
			},
			"testPassFailCounts": {
				"Status code is 400": {
					"pass": 1,
					"fail": 0
				}
			},
			"gridTitles": [
				"Status code is 400"
			],
			"gridData": [
				[
					true
				]
			],
			"tests": {
				"Status code is 400": true
			}
		},
		{
			"name": "localhost:3000/api/question",
			"id": "7a5a2e8a-4a9e-3bb7-3aab-4cb0f0cbf51f",
			"url": "localhost:3000/api/question",
			"time": 41,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": "The request cannot be fulfilled due to bad syntax."
			},
			"testPassFailCounts": {
				"Status code is 400": {
					"pass": 1,
					"fail": 0
				}
			},
			"gridTitles": [
				"Status code is 400"
			],
			"gridData": [
				[
					true
				]
			],
			"tests": {
				"Status code is 400": true
			}
		},
		{
			"name": "localhost:3000/api/question",
			"id": "5b0785af-37c2-ce9d-97cf-82feb29e6899",
			"url": "localhost:3000/api/question",
			"time": 41,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": "The request cannot be fulfilled due to bad syntax."
			},
			"testPassFailCounts": {
				"Status code is 400": {
					"pass": 1,
					"fail": 0
				}
			},
			"gridTitles": [
				"Status code is 400"
			],
			"gridData": [
				[
					true
				]
			],
			"tests": {
				"Status code is 400": true
			}
		},
		{
			"name": "localhost:3000/api/question",
			"id": "44a6ffd2-191d-007e-76d0-e00ba386c6e1",
			"url": "localhost:3000/api/question",
			"time": 52,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": "The request cannot be fulfilled due to bad syntax."
			},
			"testPassFailCounts": {
				"Status code is 400": {
					"pass": 1,
					"fail": 0
				}
			},
			"gridTitles": [
				"Status code is 400"
			],
			"gridData": [
				[
					true
				]
			],
			"tests": {
				"Status code is 400": true
			}
		},
		{
			"name": "localhost:3000/api/question",
			"id": "1d74f4f0-1b93-ca18-e3e9-b377841ed352",
			"url": "localhost:3000/api/question",
			"time": 198,
			"responseCode": {
				"code": 201,
				"name": "Created",
				"detail": "The request has been fulfilled and resulted in a new resource being created."
			},
			"testPassFailCounts": {
				"Status code is 201": {
					"pass": 1,
					"fail": 0
				}
			},
			"gridTitles": [
				"Status code is 201"
			],
			"gridData": [
				[
					true
				]
			],
			"tests": {
				"Status code is 201": true
			}
		},
		{
			"name": "DELETE /api/result/",
			"id": "86938958-53b1-947f-f643-1a5f9a665ab3",
			"url": "localhost:3000/api/result",
			"time": 123,
			"responseCode": {
				"code": 204,
				"name": "No Content",
				"detail": "The server successfully processed the request, but is not returning any content."
			},
			"testPassFailCounts": {
				"Status code is 204": {
					"pass": 1,
					"fail": 0
				}
			},
			"gridTitles": [
				"Status code is 204"
			],
			"gridData": [
				[
					true
				]
			],
			"tests": {
				"Status code is 204": true
			}
		},
		{
			"name": "POST /api/result/",
			"id": "d9cf1fa7-b27c-1d52-fb47-55a41b3e2c8c",
			"url": "localhost:3000/api/result",
			"time": 127,
			"responseCode": {
				"code": 201,
				"name": "Created",
				"detail": "The request has been fulfilled and resulted in a new resource being created."
			},
			"testPassFailCounts": {
				"Status code is 201": {
					"pass": 1,
					"fail": 0
				},
				"Correct json values": {
					"pass": 1,
					"fail": 0
				}
			},
			"gridTitles": [
				"Status code is 201",
				"Correct json values"
			],
			"gridData": [
				[
					true,
					true
				]
			],
			"tests": {
				"Status code is 201": true,
				"Correct json values": true
			}
		},
		{
			"name": "GET /api/result",
			"id": "8a772ee2-3a1e-3174-fe1c-104158dd207d",
			"url": "localhost:3000/api/result",
			"time": 164,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
			},
			"testPassFailCounts": {
				"Status code is 200": {
					"pass": 1,
					"fail": 0
				},
				"get a length 1 array": {
					"pass": 1,
					"fail": 0
				}
			},
			"gridTitles": [
				"Status code is 200",
				"get a length 1 array"
			],
			"gridData": [
				[
					true,
					true
				]
			],
			"tests": {
				"Status code is 200": true,
				"get a length 1 array": true
			}
		},
		{
			"name": "GET /api/result/:id",
			"id": "ea9d9fb2-c9ff-5ae3-5b07-d1b0775aed32",
			"url": "localhost:3000/api/result/:id",
			"time": 67,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
			},
			"testPassFailCounts": {
				"Status code is 200": {
					"pass": 1,
					"fail": 0
				}
			},
			"gridTitles": [
				"Status code is 200"
			],
			"gridData": [
				[
					true
				]
			],
			"tests": {
				"Status code is 200": true
			}
		},
		{
			"name": "DELETE /api/result/:id",
			"id": "80230551-19b3-8714-0512-e3dac54f35cf",
			"url": "localhost:3000/api/result/:id",
			"time": 108,
			"responseCode": {
				"code": 204,
				"name": "No Content",
				"detail": "The server successfully processed the request, but is not returning any content."
			},
			"testPassFailCounts": {
				"Status code is 204": {
					"pass": 1,
					"fail": 0
				}
			},
			"gridTitles": [
				"Status code is 204"
			],
			"gridData": [
				[
					true
				]
			],
			"tests": {
				"Status code is 204": true
			}
		},
		{
			"name": "GET /api/result/:id (with wrong id)",
			"id": "4836112b-2179-9989-ffa7-5c15ea9e2414",
			"url": "localhost:3000/api/result/:id",
			"time": 126,
			"responseCode": {
				"code": 404,
				"name": "Not Found",
				"detail": "The requested resource could not be found but may be available again in the future. Subsequent requests by the client are permissible."
			},
			"testPassFailCounts": {
				"Status code is 404": {
					"pass": 1,
					"fail": 0
				}
			},
			"gridTitles": [
				"Status code is 404"
			],
			"gridData": [
				[
					true
				]
			],
			"tests": {
				"Status code is 404": true
			}
		},
		{
			"name": "GET /api/result/last (with no elements)",
			"id": "60c9cbc7-d535-3f89-89ed-890b4a18fbc9",
			"url": "localhost:3000/api/result/last",
			"time": 119,
			"responseCode": {
				"code": 404,
				"name": "Not Found",
				"detail": "The requested resource could not be found but may be available again in the future. Subsequent requests by the client are permissible."
			},
			"testPassFailCounts": {
				"Status code is 404": {
					"pass": 1,
					"fail": 0
				}
			},
			"gridTitles": [
				"Status code is 404"
			],
			"gridData": [
				[
					true
				]
			],
			"tests": {
				"Status code is 404": true
			}
		},
		{
			"name": "POST /api/result/",
			"id": "dedfe489-606d-90c7-fc55-59b5bb3a66bc",
			"url": "localhost:3000/api/result",
			"time": 136,
			"responseCode": {
				"code": 201,
				"name": "Created",
				"detail": "The request has been fulfilled and resulted in a new resource being created."
			},
			"testPassFailCounts": {
				"Status code is 201": {
					"pass": 1,
					"fail": 0
				},
				"Correct json values": {
					"pass": 1,
					"fail": 0
				}
			},
			"gridTitles": [
				"Status code is 201",
				"Correct json values"
			],
			"gridData": [
				[
					true,
					true
				]
			],
			"tests": {
				"Status code is 201": true,
				"Correct json values": true
			}
		},
		{
			"name": "GET /api/result/last",
			"id": "3d9f0ea3-c333-84e3-cb81-e37dc8267ed7",
			"url": "localhost:3000/api/result/last",
			"time": 143,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
			},
			"testPassFailCounts": {
				"Status code is 200": {
					"pass": 1,
					"fail": 0
				},
				"Correct json values": {
					"pass": 1,
					"fail": 0
				}
			},
			"gridTitles": [
				"Status code is 200",
				"Correct json values"
			],
			"gridData": [
				[
					true,
					true
				]
			],
			"tests": {
				"Status code is 200": true,
				"Correct json values": true
			}
		},
		{
			"name": "GET /api/result/",
			"id": "46aaf5fd-576e-2b5b-a9ee-38313f2b836e",
			"url": "localhost:3000/api/user",
			"time": 94,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
			},
			"testPassFailCounts": {
				"Status code is 200": {
					"pass": 1,
					"fail": 0
				},
				"Your test name": {
					"pass": 1,
					"fail": 0
				}
			},
			"gridTitles": [
				"Status code is 200",
				"Your test name"
			],
			"gridData": [
				[
					true,
					true
				]
			],
			"tests": {
				"Status code is 200": true,
				"Your test name": true
			}
		},
		{
			"name": "/api/result/ — change name",
			"id": "e5052664-fe49-ad05-9d86-2dd2a0e99ba8",
			"url": "localhost:3000/api/user",
			"time": 121,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
			},
			"testPassFailCounts": {
				"Status code is 200": {
					"pass": 1,
					"fail": 0
				},
				"Empty body": {
					"pass": 1,
					"fail": 0
				}
			},
			"gridTitles": [
				"Status code is 200",
				"Empty body"
			],
			"gridData": [
				[
					true,
					true
				]
			],
			"tests": {
				"Status code is 200": true,
				"Empty body": true
			}
		},
		{
			"name": "/api/result/ — change a wrong field",
			"id": "b957c937-da05-69b2-a343-559845e38bf6",
			"url": "localhost:3000/api/user",
			"time": 21,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": "The request cannot be fulfilled due to bad syntax."
			},
			"testPassFailCounts": {
				"Status code is 400": {
					"pass": 1,
					"fail": 0
				},
				"Empty body": {
					"pass": 1,
					"fail": 0
				}
			},
			"gridTitles": [
				"Status code is 400",
				"Empty body"
			],
			"gridData": [
				[
					true,
					true
				]
			],
			"tests": {
				"Status code is 400": true,
				"Empty body": true
			}
		}
	],
	"synced": false
}